/******************************* 
 * Problem Set 4
 * CSC324
 * By: Sergei Iakhnin
 * #: 981843420
 * TA: Alex Kessaris
 *******************************/

/* This file tests the predicates in ps4q5.P */

% Load ps4q5.P
[ps4q5].

/* Testing for even(L) */
write('*****Testing for even(L)*****').

/**********************************************************************
 * Determine whether the empty list has an even number of elements
 * Expecting: yes
 **********************************************************************/
even([]).

/**********************************************************************
 * Determine whether a list with one element has an even number of 
 * elements
 * Expecting: no
 **********************************************************************/
even([_]).

/**********************************************************************
 * Determine whether a list with two elements has an even number of 
 * elements
 * Expecting: yes
 **********************************************************************/
even([_,_]).

/**********************************************************************
 * Determine whether a list with 11 elements has an even number of 
 * elements
 * Expecting: no
 **********************************************************************/
even([_,_,_,_,_,_,_,_,_,_,_]).
 
/**********************************************************************
 * Determine whether a list with 12 elements has an even number of
 * elements
 * Expecting: yes
 **********************************************************************/
even([_,_,_,_,_,_,_,_,_,_,_,_]).

/**********************************************************************
 * Inspect the general structure of a list with an even number of
 * elements. Iterate several levels deep.
 * Expecting: L = []
 *            L = [_somevar1,_somevar2]
 *            L = [_somevar1,_somevar2,_somevar3,_somevar4]
 *            L = [_somevar1,_somevar2,_somevar3,_somevar4,_somevar5,_somevar6]
 *            yes
 **********************************************************************/
even(L).
;
;
;


/* Testing for palindrome(L) */
write('*****Testing for palindrome(L)*****').

/**********************************************************************
 * Determine whether the empty list is a plaindrome
 * Expecting: yes
 **********************************************************************/
palindrome([]).

/**********************************************************************
 * Determine whether any list with 1 element is a palindrome
 * Expecting: yes
 **********************************************************************/
palindrome([_]).

/**********************************************************************
 * Determine whether the list [r,a,c,e,c,a,r] is a plaindrome
 * Expecting: yes
 **********************************************************************/
palindrome([r,a,c,e,c,a,r]).

/**********************************************************************
 * Determine whether the list [n,e,v,e,r,o,d,d,o,r,e,v,e,n] is a
 * palindrome
 * Expecting: yes
 **********************************************************************/
palindrome([n,e,v,e,r,o,d,d,o,r,e,v,e,n]).

/**********************************************************************
 * Determine whether the list [a,b,c,c,b,d] is a palindrome
 * Expecting: no
 **********************************************************************/
palindrome([a,b,c,c,b,d]).

/**********************************************************************
 * Determine whether the list [a,b,c,b,d] is a palindrome
 * Expecting: no
 **********************************************************************/
palindrome([a,b,c,b,d]).


/**********************************************************************
 * Inspect the general structure of a list that is a palindrome.
 * View several levels deep
 * Expecting: L = []
 *            L = [_somevar1]
 *            L = [_somevar1,_somevar1]
 *            L = [_somevar1,_somevar2,_somevar1]
 *            L = [_somevar1,_somevar2,_somevar2,_somevar1]
 *            L = [_somevar1,_somevar2,_somevar3,_somevar2,_somevar1]
 *            L = [_somevar1,_somevar2,_somevar3,_somevar3,_somevar2,_somevar1]
 *            yes
 **********************************************************************/
palindrome(L).
;
;
;
;
;
;


/* Testing for selectionsort(L1,L2) */
write('*****Testing for selectionsort(L1,L2)*****').

/**********************************************************************
 * Determine whether the empty list is the empty list sorted in 
 * non-decreasing order
 * Expecting: yes
 **********************************************************************/
selectionsort([],[]).

/**********************************************************************
 * Determine whether list [1,2,3,4,5] is the list [3,2,5,1,4] sorted
 * in non-decreasing order
 * Expecting: yes
 **********************************************************************/
selectionsort([3,2,5,1,4],[1,2,3,4,5]).

/**********************************************************************
 * Determine whether list [2,1,3] is the list [3,2,1] sorted in 
 * non-decreasing order
 * Expecting: no
 **********************************************************************/
selectionsort([3,2,1],[2,1,3]).

/**********************************************************************
 * Determine whether list [1,1,5,7,7,8] is the list [5,8,7,1,1,7] sorted
 * in non-decreasing order
 * Expecting: yes
 **********************************************************************/
selectionsort([5,8,7,1,1,7],[1,1,5,7,7,8]).

/**********************************************************************
 * Sort the list [5,4,3,2,1]
 * Expecting: L = [1,2,3,4,5]
 *            no
 **********************************************************************/
selectionsort([5,4,3,2,1],L).
;

/**********************************************************************
 * Sort the list [1,2,3,4,5]
 * Expecting: L = [1,2,3,4,5]
 *            no
 **********************************************************************/
selectionsort([1,2,3,4,5],L).
;

/**********************************************************************
 * Sort the list [5,4,2,1,3]
 * Expecting: L = [1,2,3,4,5]
 *            no
 **********************************************************************/
selectionsort([5,4,2,1,3],L).
;

/**********************************************************************
 * Sort the list [2,1000,1,1,6,1024,1000]
 * Expecting: L = [1,1,2,6,1000,1000,1024]
 *            L = [1,1,2,6,1000,1000,1024]
 *            L = [1,1,2,6,1000,1000,1024]
 *            L = [1,1,2,6,1000,1000,1024]
 *            no
 **********************************************************************/
selectionsort([2,1000,1,1,6,1024,1000],L).
;
;
;
;





 
 
