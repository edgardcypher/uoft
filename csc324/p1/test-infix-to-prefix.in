;Title: Scheme Project 1
;By: Sergei Iakhnin
;#: 981 843 420
;For: Alex Kress
;Course: CSC 324


;Load the system
(load "p1")

;Convert an empty expression
;Expect: ()
(infix-to-prefix '())

;Convert an all-infix expression with no nesting
;Expect: (+ 1 1)
(infix-to-prefix '(1 + 1))

;Convert an all-refix expression with no nesting
;Expect: (* 1 1)
(infix-to-prefix '(* 1 1))

;Convert an all-infix expression with 1 level of nesting
;Expect: (+ (* 1 1) (/ 2 2))
(infix-to-prefix '((1 * 1) + (2 / 2)))

;Convert an all-prefix expression with 1 level of nesting
;Expect: (* (+ 1 1) (- 3 2))
(infix-to-prefix '(* (+ 1 1) (- 3 2)))

;Convert a mixed infix and prefix expression with 1 level of nesting
;Expect: (* (+ 1 1) (compound-procedure... 2 3))
(infix-to-prefix '((+ 1 1) * (2 ^ 3)))

;Convert an all-infix expression with 2 levels of nesting
;Expect: (+ (+ 2 (+ 1 1)) (* (* 2 1) (/ 4 2)))
(infix-to-prefix '((2 + (1 + 1)) + ((2 * 1) * (4 / 2))))

;Convert an all-prefix expression with 2 levels of nesting
;Expect: (- (+ (- 4 2) (- 4 3)) (+ 2 (* 2 1)))
(infix-to-prefix '(- (+ (- 4 2) (- 4 3)) (+ 2 (* 2 1))))

;Convert a mixed infix and prefix expression with 2 levels of nesting
;Expect: (compound-procedure... (+ (+ 2 1) (compound-procedure... 2 4)) (* (+ 1 1) (* 4 1)))
(infix-to-prefix '((+ (2 + 1) (2 ^ 4)) % ((+ 1 1) * (* 4 1))))

;Convert an all-infix expression with 7 levels of nesting
;Save the result in sum
;Display sum
;Eval sum to verify validity of information
;Expect value of sum to be:
#| 
(+ (+ (+ (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))) (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))))) (+ (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))) (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))))) (+ (+ (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (1+ 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))) (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))))) (+ (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))) (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))))))
|#
;Expect eval of sum to be: 256

(define sum (infix-to-prefix '((((((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))))) + (((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))))) + ((((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))))) + (((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))))))) + (((((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1+ 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))))) + (((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))))) + ((((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))))) + (((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))))))))))
sum
(eval sum '())

;Convert an all-prefix expression with 7 levels of nesting
;Save the result in sum
;Display sum
;Eval sum to verify validity of information
;Expect value of sum to be the expression entered without change
;Expect eval of sum to be: 256
(define sum (infix-to-prefix '(+ (+ (+ (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))) (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))))) (+ (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))) (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))))) (+ (+ (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (1+ 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))) (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))))) (+ (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))) (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))))))))
sum
(eval sum '())

;Convert a mixed infix and prefix expression with 7 levels of nesting
;Save the result in sum
;Display sum
;Eval sum to verify validity of information
;Expect value of sum to be:
#|
(+ (+ (+ (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))) (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))))) (+ (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))) (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))))) (+ (+ (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (1+ 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))) (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))))) (+ (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))) (+ (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) (+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))))))))
|#
;Expect eval of sum to be: 256
(define sum (infix-to-prefix '((((((+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))))) + (((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))))) + (((+ (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))))) + (((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))) + ((+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))))))) + (((((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1+ 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))))) + (((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (+ (+ (+ 1 1) (+ 1 1)) (+ (+ 1 1) (+ 1 1)))))) + ((((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))))) + (((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1)))) + ((((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))) + (((1 + 1) + (1 + 1)) + ((1 + 1) + (1 + 1))))))))))
sum
(eval sum '())

;Convert a function call with no arguments
;Expect: f
(infix-to-prefix 'f)

;Convert a function call with 1 argument and no nesting within the argument
;Expect: (f 1)
(infix-to-prefix '(f 1))

;Convert a function call with 2 arguments and no nesting within the arguments
;Expect: (f 1 2)
(infix-to-prefix '(f 1 2))

;Convert a function call with 3 arguments and no nesting within the argumens
;Expect: (f 1 2 3)
(infix-to-prefix '(f 1 2 3))

;Convert a function call with 15 arguments and no nesting within the arguments
;Expect: (f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
(infix-to-prefix '(f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))

;Convert a function call with 35 arguments and no nesting within the arguments
;Expect: (f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35)
(infix-to-prefix '(f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35))

;Convert a function call with 1 argument with 1 level of nesting within the argument
;Expect: (f (+ 1 1))
(infix-to-prefix '(f (1 + 1)))

;Convert a function call with 2 arguments with 1 level of nesting within the arguments
;Expect: (f (+ 1 1) (+ 1 1))
(infix-to-prefix '(f (1 + 1) (+ 1 1)))

;Convert a function call with 3 arguments with 1 level of nesting within the arguments
;Expect (f (+ 1 1) (+ 1 1) (* 1 -1))
(infix-to-prefix '(f (1 + 1) (+ 1 1) (1 * -1)))

;Convert a function call with 10 arguments with 1 level of nestin within the arguments
;Expect: (f 1 2 (+ 1 1) 3 (* 1 1) (compound-pocedure... 2 3) (compound-procedure... 3 2) 7 8 (- 1 1) (- 1 1))
(infix-to-prefix '(f 1 2 (1 + 1) 3 (* 1 1) (2 ^ 3) (3 % 2) 7 8 (1 - 1) (- 1 1)))

;Convert a function call with 1 argument with several levels of nesting within the argument
;Expect: (f (+ (+ 1 (+ 1 1)) (- 1 1)))
(infix-to-prefix '(f ((1 + (+ 1 1)) + (1 - 1))))

;Convert a function call with 2 arguments with several levels of nesting within the argument
;Expect: (f (+ (+ 2 3) (+ 2 3)) (- 6 (+ (+ 2 3) (+ (+ 1 1) 1))))
(infix-to-prefix '(f (+ (+ 2 3) (2 + 3)) (6 - ((2 + 3) + ((1 + 1) + 1)))))

;Convert a function call with 10 arguments with several levels of nesting within the argument
;Expect: (f 1 2 (+ 1 (+ 1 1)) 3 (* (compound-procedure... 1 (* 2 (+ 1 1))) 1) (compound-procedure... 2 3) (compound-procedure... (+ 3 (- 5 1)) 2) 7 8 (-1 1) (- 1 1))
(infix-to-prefix '(f 1 2 (1 + (+ 1 1)) 3 (* (1 ^ (2 * (1 + 1))) 1) (2 ^ 3) ((+ 3 (5 - 1)) % 2) 7 8 (1 - 1) (- 1 1)))

;Convert a function call with 10 arguments with function calls of various numbers of arguments embedded in the arguments
;Expect: (f g 2 (h 1 2) 3 (* 1 1) (i (+ 2 3) 3 (+ 2 (+ 3 4))) (compound-procedure 3 2) 7 8 (j 1 2 3 4 5 (+ 2 3) 6) (- 1 1))
(infix-to-prefix '(f g 2 (h 1 2) 3 (* 1 1) (i (2 + 3) 3 (+ 2 (3 + 4))) (3 % 2) 7 8 (j 1 2 3 4 5 (2 + 3) 6) (- 1 1)))

;Convert an expression with function calls embedded
;Expect: (<= (f 1 2 (g 2) (h (+ 2 3) (i 1))) (+ (- 3 (k 6)) (* (compound-procedure 3 2) (m g))))
(infix-to-prefix '((f 1 2 (g 2) (h (2 + 3) (i 1))) <= (+ (3 - (k 6)) ((3 ^ 2) * (m g)))))

;Finished testing infix-to-prefix
(exit)

