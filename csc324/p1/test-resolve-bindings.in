;Title: Scheme Project 1
;By: Sergei Iakhnin
;#: 981 843 420
;For: Alex Kress
;Course: CSC 324

;Load the system
(load "p1")

;Setup the bindings
(define bindings `((a . 1) (b . 2) (c . 3) (f . ,(lambda () (+ 2 3))) (a . 5) (f . ,(lambda() (display-all 'blah))) (d . 4) (g . ,(lambda (x) (+ x x))) (h . (lambda (x y) (+ x y))) (e . 5)))

;Resolve an expression without symbols on an empty set of bindings
;Expect: (2 + (* 3 4))
(resolve-bindings '(2 + (* 3 4)) '())

;Resolve an expression with symbols on an empty set of bindings
;This should never occur in the system as a whole as such an expression
;would not pass the validate-bindings call
;Expect: ...contact system vendor for a patch
(resolve-bindings '(+ (+ a b) (g (h b c))) '())

;Resolve an expression with symbols on a set of bindings where all the bindings are present
;Expect: (+ (+ 1 compound-procedure) (compound-procedure (compound-procedure 2 3)))
(resolve-bindings '(+ (+ a (f)) (g (h b c))) bindings)

;Resolve an expression with symbols on a set of bindings where not all the bindings are present
;This should never occur in the system as a whole as such an expression
;would not pass the validate-bindings call
;Expect: ...contact system vendor for a patch
(resolve-bindings '(+ (+ z (f)) (g (h b c))) bindings)

;Resolve an expression with multiple occurences of the same binding present
;Expect: (+ (+ (1 * (1 + 2)) compound-procedure) (compound-procedure (compound-procedure 2 3)))
(resolve-bindings '(+ (+ (a * (a + b)) (f)) (g (h b c))) bindings)

;Resolve an expression with ^ and %
;Expect: (+ (1 % 3) (compound-procedure (2 ^ 3) (4 ^ 5))))
(resolve-bindings '(+ (1 % c) (h (b ^ c) (d ^ e))) bindings)

;Finished testing resolve-bindings
(exit)