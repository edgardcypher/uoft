// generated by Fast Light User Interface Designer (fluid) version 1.0100

#include "ScissorUI.h"

inline void ScissorUI::cb_OpenImageItem_i(Fl_Menu_*, void*) {
  #include "fluid-hooks/callback-open-image.h"
}
void ScissorUI::cb_OpenImageItem(Fl_Menu_* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_OpenImageItem_i(o,v);
}

inline void ScissorUI::cb_OpenCommandItem_i(Fl_Menu_*, void*) {
  #include "fluid-hooks/callback-open-drawing.h"
}
void ScissorUI::cb_OpenCommandItem(Fl_Menu_* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_OpenCommandItem_i(o,v);
}

inline void ScissorUI::cb_SaveCommandItem_i(Fl_Menu_*, void*) {
  #include "fluid-hooks/callback-save-drawing.h"
}
void ScissorUI::cb_SaveCommandItem(Fl_Menu_* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_SaveCommandItem_i(o,v);
}

inline void ScissorUI::cb_QuitItem_i(Fl_Menu_*, void*) {
  #include "fluid-hooks/callback-quit.h"
}
void ScissorUI::cb_QuitItem(Fl_Menu_* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_QuitItem_i(o,v);
}

inline void ScissorUI::cb_SaveBoundary_i(Fl_Menu_*, void*) {
  #include "fluid-hooks/callback-save-boundary.h"
}
void ScissorUI::cb_SaveBoundary(Fl_Menu_* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_SaveBoundary_i(o,v);
}

inline void ScissorUI::cb_SaveMatte_i(Fl_Menu_*, void*) {
  #include "fluid-hooks/callback-save-matte.h"
}
void ScissorUI::cb_SaveMatte(Fl_Menu_* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_SaveMatte_i(o,v);
}

inline void ScissorUI::cb_SaveGradient_i(Fl_Menu_*, void*) {
  #include "fluid-hooks/callback-save-gradient.h"
}
void ScissorUI::cb_SaveGradient(Fl_Menu_* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_SaveGradient_i(o,v);
}

inline void ScissorUI::cb_SaveZeroCrossings_i(Fl_Menu_*, void*) {
  #include "fluid-hooks/callback-save-zero-crossings.h"
}
void ScissorUI::cb_SaveZeroCrossings(Fl_Menu_* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_SaveZeroCrossings_i(o,v);
}

inline void ScissorUI::cb_SaveLinkCosts_i(Fl_Menu_*, void*) {
  #include "fluid-hooks/callback-save-link-costs.h"
}
void ScissorUI::cb_SaveLinkCosts(Fl_Menu_* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_SaveLinkCosts_i(o,v);
}

inline void ScissorUI::cb_SaveSeedPoints_i(Fl_Menu_*, void*) {
  #include "fluid-hooks/callback-save-seed-points.h"
}
void ScissorUI::cb_SaveSeedPoints(Fl_Menu_* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_SaveSeedPoints_i(o,v);
}

inline void ScissorUI::cb_LoadSeedPoints_i(Fl_Menu_*, void*) {
  #include "fluid-hooks/callback-load-seed-points.h"
}
void ScissorUI::cb_LoadSeedPoints(Fl_Menu_* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_LoadSeedPoints_i(o,v);
}

inline void ScissorUI::cb_ConvertPointsToBSpline_i(Fl_Menu_*, void*) {
  #include "fluid-hooks/callback-convert-to-spline.h"
}
void ScissorUI::cb_ConvertPointsToBSpline(Fl_Menu_* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_ConvertPointsToBSpline_i(o,v);
}

inline void ScissorUI::cb_LoadSplineFromFile_i(Fl_Menu_*, void*) {
  #include "fluid-hooks/callback-load-spline.h"
}
void ScissorUI::cb_LoadSplineFromFile(Fl_Menu_* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_LoadSplineFromFile_i(o,v);
}

Fl_Menu_Item ScissorUI::menu_TopMenu[] = {
 {"File", 0,  0, 0, 64, 0, 1, 14, 56},
 {"Open Image", 0x8006f,  (Fl_Callback*)ScissorUI::cb_OpenImageItem, 0, 128, 0, 1, 14, 56},
 {"Open Drawing", 0x80063,  (Fl_Callback*)ScissorUI::cb_OpenCommandItem, 0, 0, 0, 1, 14, 56},
 {"Save Drawing", 0x80073,  (Fl_Callback*)ScissorUI::cb_SaveCommandItem, 0, 0, 0, 1, 14, 56},
 {"Quit", 0x80071,  (Fl_Callback*)ScissorUI::cb_QuitItem, 0, 0, 0, 1, 14, 56},
 {0},
 {"Scissor", 0,  0, 0, 64, 0, 1, 14, 56},
 {"Save Boundary", 0,  (Fl_Callback*)ScissorUI::cb_SaveBoundary, 0, 0, 0, 1, 14, 56},
 {"Save Matte", 0,  (Fl_Callback*)ScissorUI::cb_SaveMatte, 0, 0, 0, 1, 14, 56},
 {"Save Gradient", 0,  (Fl_Callback*)ScissorUI::cb_SaveGradient, 0, 0, 0, 1, 14, 56},
 {"Save Zero Crossings", 0,  (Fl_Callback*)ScissorUI::cb_SaveZeroCrossings, 0, 0, 0, 1, 14, 56},
 {"Save Link Costs", 0,  (Fl_Callback*)ScissorUI::cb_SaveLinkCosts, 0, 0, 0, 1, 14, 56},
 {"Save Seed Points", 0,  (Fl_Callback*)ScissorUI::cb_SaveSeedPoints, 0, 0, 0, 1, 14, 56},
 {"Load Seed Points", 0,  (Fl_Callback*)ScissorUI::cb_LoadSeedPoints, 0, 0, 0, 1, 14, 56},
 {0},
 {"B-Spline", 0,  0, 0, 64, 0, 1, 14, 56},
 {"Convert Points to B-Spline", 0,  (Fl_Callback*)ScissorUI::cb_ConvertPointsToBSpline, 0, 0, 0, 1, 14, 56},
 {"Load From File", 0,  (Fl_Callback*)ScissorUI::cb_LoadSplineFromFile, 0, 0, 0, 1, 14, 56},
 {0},
 {0}
};
Fl_Menu_Item* ScissorUI::FileSubmenu = ScissorUI::menu_TopMenu + 0;
Fl_Menu_Item* ScissorUI::OpenImageItem = ScissorUI::menu_TopMenu + 1;
Fl_Menu_Item* ScissorUI::OpenCommandItem = ScissorUI::menu_TopMenu + 2;
Fl_Menu_Item* ScissorUI::SaveCommandItem = ScissorUI::menu_TopMenu + 3;
Fl_Menu_Item* ScissorUI::QuitItem = ScissorUI::menu_TopMenu + 4;
Fl_Menu_Item* ScissorUI::ScissorSubmenu = ScissorUI::menu_TopMenu + 6;
Fl_Menu_Item* ScissorUI::SaveBoundary = ScissorUI::menu_TopMenu + 7;
Fl_Menu_Item* ScissorUI::SaveMatte = ScissorUI::menu_TopMenu + 8;
Fl_Menu_Item* ScissorUI::SaveGradient = ScissorUI::menu_TopMenu + 9;
Fl_Menu_Item* ScissorUI::SaveZeroCrossings = ScissorUI::menu_TopMenu + 10;
Fl_Menu_Item* ScissorUI::SaveLinkCosts = ScissorUI::menu_TopMenu + 11;
Fl_Menu_Item* ScissorUI::SaveSeedPoints = ScissorUI::menu_TopMenu + 12;
Fl_Menu_Item* ScissorUI::LoadSeedPoints = ScissorUI::menu_TopMenu + 13;
Fl_Menu_Item* ScissorUI::BSpline = ScissorUI::menu_TopMenu + 15;
Fl_Menu_Item* ScissorUI::ConvertPointsToBSpline = ScissorUI::menu_TopMenu + 16;
Fl_Menu_Item* ScissorUI::LoadSplineFromFile = ScissorUI::menu_TopMenu + 17;

inline void ScissorUI::cb_DrawPoint_i(Fl_Button*, void*) {
  #include "fluid-hooks/callback-point.h"
}
void ScissorUI::cb_DrawPoint(Fl_Button* o, void* v) {
  ((ScissorUI*)(o->parent()->parent()->user_data()))->cb_DrawPoint_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_dot[] = {
"25 25 -5 1",
"!\31\30\31\"\21\21\21#\377\377\377$\0\0\0%\340\337\343",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%$$$$%%%%%",
"%%%%%%%%%%%%%%%%$###$%%%%",
"%%%%%%%%%%%%%%%$####$%%%%",
"%%%%%%%%%%%%%%%$$##$%%%%%",
"%%%%%%%%%%%%%%$##$$$%%%%%",
"%%%%%%%%%%%%%%$###$%%%%%%",
"%%%%%%%%%%%%%$####$%%%%%%",
"%%%%%%%%%%%%%$###$%%%%%%%",
"%%%%%%%%%%%%$####$%%%%%%%",
"%%%%%%%%%%%%$###$%%%%%%%%",
"%%%%%%%%%%%%$$##$%%%%%%%%",
"%%%%%%%%%%%%$$$$%%%%%%%%%",
"%%%%%%%%%%%%$$$%%%%%%%%%%",
"%%%%%%%%%%%%\"$%%%%%%%%%%%",
"%%%%%%%%%%%%!%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%$$$%%%%%%%%%%%%%%",
"%%%%%%%%$$$%%%%%%%%%%%%%%",
"%%%%%%%%$$$%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%"
};
static Fl_Pixmap image_dot(idata_dot);

inline void ScissorUI::cb_DrawLine_i(Fl_Button*, void*) {
  #include "fluid-hooks/callback-line.h"
}
void ScissorUI::cb_DrawLine(Fl_Button* o, void* v) {
  ((ScissorUI*)(o->parent()->parent()->user_data()))->cb_DrawLine_i(o,v);
}

static const char *idata_line[] = {
"25 25 -5 1",
"!EEF\"545#\4\4\4$\0\0\0%\340\337\343",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%!#%%%%%%%%%%%%%%%%%",
"%%%%%%%#$%%%%%%%%%%%%%%%%",
"%%%%%%%%#$%%%%%%%%%%%%%%%",
"%%%%%%%%%#$%%%%%%%%%%%%%%",
"%%%%%%%%%%##%%%%%%%%%%%%%",
"%%%%%%%%%%%##%%%%%%%%%%%%",
"%%%%%%%%%%%%#$%%%%%%%%%%%",
"%%%%%%%%%%%%%#$%%%%%%%%%%",
"%%%%%%%%%%%%%%#$%%%%%%%%%",
"%%%%%%%%%%%%%%%#$%%%%%%%%",
"%%%%%%%%%%%%%%%%#$%%%%%%%",
"%%%%%%%%%%%%%%%%%#\"%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%",
"%%%%%%%%%%%%%%%%%%%%%%%%%"
};
static Fl_Pixmap image_line(idata_line);

inline void ScissorUI::cb_DrawRect_i(Fl_Button*, void*) {
  #include "fluid-hooks/callback-rect.h"
}
void ScissorUI::cb_DrawRect(Fl_Button* o, void* v) {
  ((ScissorUI*)(o->parent()->parent()->user_data()))->cb_DrawRect_i(o,v);
}

static const char *idata_rectangle[] = {
"25 25 -3 1",
"!\0\0\0\"\377\377\377#\340\337\343",
"#########################",
"#########################",
"#########################",
"#########################",
"#########################",
"#########################",
"#########################",
"#####!!!!!!!!!!!!!!######",
"#####!\"\"\"\"\"\"\"\"\"\"\"\"!######",
"#####!\"\"\"\"\"\"\"\"\"\"\"\"!######",
"#####!\"\"\"\"\"\"\"\"\"\"\"\"!######",
"#####!\"\"\"\"\"\"\"\"\"\"\"\"!######",
"#####!\"\"\"\"\"\"\"\"\"\"\"\"!######",
"#####!\"\"\"\"\"\"\"\"\"\"\"\"!######",
"#####!\"\"\"\"\"\"\"\"\"\"\"\"!######",
"#####!\"\"\"\"\"\"\"\"\"\"\"\"!######",
"#####!!!!!!!!!!!!!!######",
"#########################",
"#########################",
"#########################",
"#########################",
"#########################",
"#########################",
"#########################",
"#########################"
};
static Fl_Pixmap image_rectangle(idata_rectangle);

inline void ScissorUI::cb_DrawCircle_i(Fl_Button*, void*) {
  #include "fluid-hooks/callback-circle.h"
}
void ScissorUI::cb_DrawCircle(Fl_Button* o, void* v) {
  ((ScissorUI*)(o->parent()->parent()->user_data()))->cb_DrawCircle_i(o,v);
}

static const char *idata_circle[] = {
"25 25 -7 1",
"!\f\f\f\"\4\4\4#\31\30\31$---%\0\0\0&\377\377\377\'\340\337\343",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'%%%%%%\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'%%&&&&&&%$\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'%&&&&&&&&&&!\'\'\'\'\'\'\'",
"\'\'\'\'\'%&&&&&&&&&&&&%\'\'\'\'\'\'",
"\'\'\'\'\'%&&&&&&&&&&&&%\'\'\'\'\'\'",
"\'\'\'\'\'%&&&&&&&&&&&&%\'\'\'\'\'\'",
"\'\'\'\'\'%&&&&&&&&&&&&%\'\'\'\'\'\'",
"\'\'\'\'\'\'%&&&&&&&&&&\"\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'%%&&&&&&%#\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'%%%%%%\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'"
};
static Fl_Pixmap image_circle(idata_circle);

inline void ScissorUI::cb_DrawPoly_i(Fl_Button*, void*) {
  #include "fluid-hooks/callback-poly.h"
}
void ScissorUI::cb_DrawPoly(Fl_Button* o, void* v) {
  ((ScissorUI*)(o->parent()->parent()->user_data()))->cb_DrawPoly_i(o,v);
}

static const char *idata_polygon[] = {
"25 25 -7 1",
"!\f\f\f\"! !#\31\30\31$\b\b\b%\0\0\0&\377\377\377\'\340\337\343",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'%\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'%&%\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'%&&&%\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'%&&&&&%\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'%&&&&&&&%\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'%&&&&&&&&&%\'\'\'\'\'\'\'",
"\'\'\'\'\'\'%&&&&&&&&&&&%\'\'\'\'\'\'",
"\'\'\'\'\'%&&&&&&&&&&&&&%\'\'\'\'\'",
"\'\'\'\'\'\'%&&&&&&&&&&&%\'\'\'\'\'\'",
"\'\'\'\'\'\'%&&&&&&&&&&&%\'\'\'\'\'\'",
"\'\'\'\'\'\'\'%&&&&&&&&&%\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'$&&&&&&&&&!\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'%&&&&&&&%\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'#&&&&&&&\"\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'%%%%%%%\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'"
};
static Fl_Pixmap image_polygon(idata_polygon);

inline void ScissorUI::cb_ChooseColor_i(Fl_Button*, void*) {
  #include "fluid-hooks/callback-color.h"
}
void ScissorUI::cb_ChooseColor(Fl_Button* o, void* v) {
  ((ScissorUI*)(o->parent()->parent()->user_data()))->cb_ChooseColor_i(o,v);
}

static const char *idata_color[] = {
"25 25 -8 1",
"![Z[\"\235\234\235#   $\361\361\361%\337\336\342&\341\340\344\'\377\377\377(\
\340\337\343",
"&&&&&&&&&&&&&&&&&&&&&&&&&",
"&((((((((((((%(%%(((((((&",
"&((((%%%%%%%%(((%(((((((&",
"&(((%%\"!###!##!\"\"(((((((&",
"&((%%\"#\"\'\'$$\'\'!##\"%%((((&",
"&((%!#\"$\'\'\'\"!%%\"\"#!%%(((&",
"&((!!\"\'\"\"$\"!!!%\'\'\"!!%(((&",
"&((#\"\'\"##\"#!\"#\"\'%\'\"#\"(%(&",
"&((#\"&#!!#\"!#\"(\"#\"\'%#%((&",
"&((#\"$!##!%%\"&\"#!#\"$#&((&",
"&((#\"\'$\"!\'$$\'\'\"#!#!$!%((&",
"&((#\"\'$$\'$\'\'\'\'$\"#!\'$#%((&",
"&((\"!#!#\"\'\'\'\'$\"#\"$\'$#%((&",
"&((%\"###!$\"\"$\"##!%\'$!%((&",
"&((%%%%%!\"#!\"####\"\'$#%((&",
"&((((%((!#%\"#\"##\"$\'$!%((&",
"&((((%(&!!!!!&%\"$\'%!!%((&",
"&(((((%#!$!!\'\'\'$%%!#%(((&",
"&(((((%#!\'\'\'$$\'\"###%((((&",
"&((((((%!#!!!!!#!(%(((((&",
"&(((((((%%%%%%%(%(%(((((&",
"&((((((%%%%(((((%(((((((&",
"&(((((((((((((((((((((((&",
"&(((((((((((((((((((((((&",
"&&&&&&&&&&&&&&&&&&&&&&&&&"
};
static Fl_Pixmap image_color(idata_color);

inline void ScissorUI::cb_ClearAll_i(Fl_Button*, void*) {
  #include "fluid-hooks/callback-clearall.h"
}
void ScissorUI::cb_ClearAll(Fl_Button* o, void* v) {
  ((ScissorUI*)(o->parent()->parent()->user_data()))->cb_ClearAll_i(o,v);
}

inline void ScissorUI::cb_Undo_i(Fl_Button*, void*) {
  #include "fluid-hooks/callback-undo.h"
}
void ScissorUI::cb_Undo(Fl_Button* o, void* v) {
  ((ScissorUI*)(o->parent()->parent()->user_data()))->cb_Undo_i(o,v);
}

inline void ScissorUI::cb_ScissorTool_i(Fl_Button*, void*) {
  #include "fluid-hooks/callback-scissor.h"
}
void ScissorUI::cb_ScissorTool(Fl_Button* o, void* v) {
  ((ScissorUI*)(o->parent()->parent()->user_data()))->cb_ScissorTool_i(o,v);
}

static const char *idata_scissor[] = {
"25 25 -7 1",
"!\324\322\325\"\341\340\344#1/,$\217\216\211%\364\362\360&\f\t\7\'\340\337\
\343",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'!##!\'\'\'\'\'###\'\'\'\'\'\'\'\'\'\'",
"\'\'\'&&&#\'\'\'!!!\'!#\'\'\'\'\'\'\'\'\'",
"\'\'\'#&&&\'\'\'#\'\'\'\'#\'\'\'\'\'\'\'\'\'",
"\'\'\'!#&\'\'\'!#\'\'\'\'#\"#\'\'\'\'\'\'\'",
"\'\'\'\'#\'\'\'\'!\'\'\"#\'\'\"#!\'\'\'\'\'\'",
"\'\'\'\'#\'\'\'\'#\'\'\"#!\'\'&!\'\'\'\'\'\'",
"\'\'\'\'#\'\'\'\'#\'\'\"#!\'\"&!\'\'\'\'\'\'",
"\'\'\'\'!!\'\'\'#\'\'\'\'#\'#!!\'\'\'\'\'\'",
"\'\'\'\'\'#\'\'!!\'\'\'\"#%&!\'\'\'\'\'\'\'",
"\'\'\'\'\'#\'\'#\'\'\'\'\'\'&&!\'\'\'\'\'\'\'",
"\'\'\'\'\'#\'\'#\'\'\'\'\'\"&&!\'\'\'\'\'\'\'",
"\'\'\'\'\'!!!#\'\'\'\'\'\'&%#\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'#\'\'\'\'\'\"#!\"#\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\"&!\'\"#\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'#!!\'\'\"&#\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'#&!\'\'\"#$\'#\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\"#$%#\'\'\"#$%#!\'\'",
"\'\'\'\'\'\'\'\'\'\'\'#$%#!\'\'\'##!!\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\"##!!\'\'\'\'!!\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'!!\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'",
"\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'"
};
static Fl_Pixmap image_scissor(idata_scissor);

inline void ScissorUI::cb_Bspline_i(Fl_Button*, void*) {
  #include "fluid-hooks/callback-bspline.h"
}
void ScissorUI::cb_Bspline(Fl_Button* o, void* v) {
  ((ScissorUI*)(o->parent()->parent()->user_data()))->cb_Bspline_i(o,v);
}

static const char *idata_bspline[] = {
"25 25 -3 1",
"!\340\337\343\"\0\0\0#\377\377\377",
"!!!!!!!!!!!!!!!!!!!!!!!!!",
"!!!!!!!!!!!!!!!!!!!!!!!!!",
"!!!!!!!\"\"\"!!!!!!!!!!!!!!!",
"!!!!!!!\"#\"!!!!!!!!!!!!!!!",
"!!!!!!!\"\"\"!!!!!!!!!!!!!!!",
"!!!!!!!!!!!!!!!!!!!!!!!!!",
"!!!!!!!\"!\"!!!!!!!!!\"\"\"!!!",
"!!!!!!!!!!!!!!!!!!!\"#\"!!!",
"!!!!!!\"!!!\"!!!!!!!!\"\"\"!!!",
"!!!!!!!\"\"!!!!!!!!!!!\"!!!!",
"!!!!!\"\"!!\"!\"!!!!!!!\"!!!!!",
"!!!!!\"!!!!\"!!!!!!!!\"!!!!!",
"!!!!\"!!!!!!\"\"!!!!!\"!!!!!!",
"!!!!\"!!!!!!!\"!!!!!\"!!!!!!",
"!!!\"!!!!!!!!!\"!!!\"!!!!!!!",
"!!!\"!!!!!!!!!!\"\"\"\"!!!!!!!",
"!!\"!!!!!!!!!!!!!!!!!!!!!!",
"!\"\"\"!!!!!!!!!!\"!\"!!!!!!!!",
"!\"#\"!!!!!!!!!!!!!!!!!!!!!",
"!\"\"\"!!!!!!!!!!\"\"\"!!!!!!!!",
"!!!!!!!!!!!!!!\"#\"!!!!!!!!",
"!!!!!!!!!!!!!!\"\"\"!!!!!!!!",
"!!!!!!!!!!!!!!!!!!!!!!!!!",
"!!!!!!!!!!!!!!!!!!!!!!!!!",
"!!!!!!!!!!!!!!!!!!!!!!!!!"
};
static Fl_Pixmap image_bspline(idata_bspline);

inline void ScissorUI::cb_levelOfDetail_i(Fl_Value_Slider*, void*) {
  #include "fluid-hooks/callback-level.h"
}
void ScissorUI::cb_levelOfDetail(Fl_Value_Slider* o, void* v) {
  ((ScissorUI*)(o->parent()->user_data()))->cb_levelOfDetail_i(o,v);
}

ScissorUI::ScissorUI() {
  Fl_Window* w;
  #include "fluid-hooks/init-scissor.h"
  { Fl_Window* o = mainWindow = new Fl_Window(667, 390, "Scissoring Interface");
    w = o;
    o->user_data((void*)(this));
    { ImDraw* o = imagePanel = new ImDraw(30, 25, 635, 365);
      Fl_Group::current()->resizable(o);
    }
    { Fl_Menu_Bar* o = TopMenu = new Fl_Menu_Bar(0, 1, 665, 25);
      o->menu(menu_TopMenu);
    }
    { Fl_Group* o = Tools = new Fl_Group(0, 0, 665, 395);
      { Fl_Button* o = DrawPoint = new Fl_Button(0, 25, 30, 30);
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->image(image_dot);
        o->callback((Fl_Callback*)cb_DrawPoint);
        o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = DrawLine = new Fl_Button(0, 55, 30, 30);
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->image(image_line);
        o->callback((Fl_Callback*)cb_DrawLine);
      }
      { Fl_Button* o = DrawRect = new Fl_Button(0, 85, 30, 30);
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->image(image_rectangle);
        o->callback((Fl_Callback*)cb_DrawRect);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = DrawCircle = new Fl_Button(0, 115, 30, 30);
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->image(image_circle);
        o->callback((Fl_Callback*)cb_DrawCircle);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = DrawPoly = new Fl_Button(0, 145, 30, 30);
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->image(image_polygon);
        o->callback((Fl_Callback*)cb_DrawPoly);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      { Fl_Button* o = ChooseColor = new Fl_Button(0, 175, 30, 30);
        o->image(image_color);
        o->callback((Fl_Callback*)cb_ChooseColor);
      }
      { Fl_Button* o = ClearAll = new Fl_Button(275, 5, 70, 17, "Clear All");
        o->box(FL_ROUND_UP_BOX);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_ClearAll);
      }
      { Fl_Button* o = Undo = new Fl_Button(370, 5, 70, 17, "Undo");
        o->box(FL_ROUND_UP_BOX);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Undo);
      }
      { Fl_Button* o = ScissorTool = new Fl_Button(0, 205, 30, 30);
        o->type(102);
        o->image(image_scissor);
        o->callback((Fl_Callback*)cb_ScissorTool);
      }
      { Fl_Button* o = Bspline = new Fl_Button(0, 235, 30, 30);
        o->type(102);
        o->image(image_bspline);
        o->callback((Fl_Callback*)cb_Bspline);
      }
      o->end();
    }
    { Fl_Value_Slider* o = levelOfDetail = new Fl_Value_Slider(0, 265, 30, 125, "Detail");
      o->tooltip("Adjust level of detail of B-Spline curve");
      o->labeltype(FL_NO_LABEL);
      o->minimum(1);
      o->maximum(0);
      o->step(1);
      o->value(1);
      o->callback((Fl_Callback*)cb_levelOfDetail);
      o->deactivate();
    }
    o->end();
  }
}

void ScissorUI::show() {
  mainWindow->show();
imagePanel->setSlider(levelOfDetail);
}

void ScissorUI::set(VImage new_im) {
  imagePanel->set(new_im);
}

void ScissorUI::setLevelOfDetail(double l) {
  imagePanel->setLevelOfDetail(l);
}
